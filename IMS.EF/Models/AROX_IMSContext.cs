// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace IMS.EF.Models;

public partial class AROX_IMSContext : DbContext
{
    public AROX_IMSContext(DbContextOptions<AROX_IMSContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Application> Applications { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<FieldType> FieldTypes { get; set; }

    public virtual DbSet<InputOption> InputOptions { get; set; }

    public virtual DbSet<Tool> Tools { get; set; }

    public virtual DbSet<ToolInput> ToolInputs { get; set; }

    public virtual DbSet<ToolOutput> ToolOutputs { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Application>(entity =>
        {
            entity.ToTable("Application");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.Customer).WithMany(p => p.Applications)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Application_Customer");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.ToTable("Customer");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<FieldType>(entity =>
        {
            entity.ToTable("FieldType");

            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<InputOption>(entity =>
        {
            entity.ToTable("InputOption");

            entity.Property(e => e.Label)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Value)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.Input).WithMany(p => p.InputOptions)
                .HasForeignKey(d => d.InputId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InputOption_ToolInput");
        });

        modelBuilder.Entity<Tool>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Table_1");

            entity.ToTable("Tool");

            entity.Property(e => e.ApiEndpoint)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.Application).WithMany(p => p.Tools)
                .HasForeignKey(d => d.ApplicationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Tool_Application");
        });

        modelBuilder.Entity<ToolInput>(entity =>
        {
            entity.ToTable("ToolInput");

            entity.Property(e => e.Label)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Placeholder).HasMaxLength(255);

            entity.HasOne(d => d.FieldType).WithMany(p => p.ToolInputs)
                .HasForeignKey(d => d.FieldTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ToolInput_FieldType");

            entity.HasOne(d => d.Tool).WithMany(p => p.ToolInputs)
                .HasForeignKey(d => d.ToolId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ToolInput_Tool");
        });

        modelBuilder.Entity<ToolOutput>(entity =>
        {
            entity.ToTable("ToolOutput");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.FieldType).WithMany(p => p.ToolOutputs)
                .HasForeignKey(d => d.FieldTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ToolOutput_FieldType");

            entity.HasOne(d => d.Tool).WithMany(p => p.ToolOutputs)
                .HasForeignKey(d => d.ToolId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ToolOutput_Tool");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}